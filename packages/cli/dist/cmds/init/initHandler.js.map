{"version":3,"file":"initHandler.js","sourceRoot":"","sources":["../../../src/cmds/init/initHandler.ts"],"names":[],"mappings":";;;;;;AAAA,gDAA6B;AAC7B,2BAAoC;AACpC,qDAM8B;AAE9B,uCAAuC;AACvC,2CAQqB;AAErB,MAAM,iBAAiB,GAAG,MAAM,CAAC;AAEjC;;;;;;;;;GASG;AACI,KAAK,UAAU,WAAW,CAAC,IAAe;IAC/C,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;IAE3B,MAAM,kBAAkB,GAAG,IAAA,kCAAqB,EAC9C,OAAO,CAAC,OAAO,EACf,iBAAiB,CAClB,CAAC;IAEF,IAAI,CAAC,kBAAkB,EAAE;QACvB,IAAA,gBAAQ,EACN,0DAA0D,OAAO,CAAC,OAAO,4BAA4B,iBAAiB,GAAG,CAC1H,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC3C;IAED,MAAM,SAAS,GAAG,IAAA,0BAAc,GAAE,CAAC;IACnC,IAAI,CAAC,SAAS,EAAE;QACd,IAAA,gBAAQ,EACN,mEAAmE,CACpE,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IAED,MAAM,cAAc,GAAG,SAAS;QAC9B,CAAC,CAAC,cAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,CAAC;QAC1C,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;IAElB,OAAO,CAAC,GAAG,CAAC,aAAa,cAAc,KAAK,CAAC,CAAC;IAE9C,MAAM,IAAA,mCAAuB,EAAC,cAAc,CAAC,CAAC;IAE9C,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACnC,MAAM,IAAA,yBAAa,EAAC,cAAc,CAAC,CAAC;QAEpC,aAAE,CAAC,EAAE,CAAC,cAAS,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE;YAC5C,KAAK,EAAE,IAAI;YACX,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;KACJ;IAAC,OAAO,GAAG,EAAE;QACZ,IAAA,gBAAQ,EAAC,oDAAoD,CAAC,CAAC;QAC/D,MAAM,GAAG,CAAC;KACX;IAED,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAC1C,MAAM,IAAA,uBAAW,EAAC,cAAc,CAAC,CAAC;IAElC,IAAI,CAAC,IAAA,6BAAiB,EAAC,cAAc,CAAC,EAAE;QACtC,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAC9C,MAAM,IAAA,mBAAO,EAAC,cAAc,CAAC,CAAC;KAC/B;IAED,MAAM,YAAY,GAAG,cAAS,CAAC,IAAI,CAAC,cAAc,EAAE,yBAAa,CAAC,CAAC;IAEnE,MAAM,QAAQ,GAAiB,MAAM,IAAA,yBAAY,EAC/C,cAAS,CAAC,IAAI,CAAC,YAAY,EAAE,6BAAgB,CAAC,QAAQ,CAAC,CACxD,CAAC;IACF,MAAM,WAAW,GAAuB,MAAM,IAAA,yBAAY,EACxD,cAAS,CAAC,IAAI,CAAC,YAAY,EAAE,6BAAgB,CAAC,WAAW,CAAC,CAC3D,CAAC;IAEF,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAElE,uCACK,IAAI,KACP,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EACjB,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,EACxB,GAAG,EAAE,WAAW,CAAC,IAAI,IAAI,cAAc,EACvC,YAAY,IACZ;AACJ,CAAC;AAtED,kCAsEC","sourcesContent":["import pathUtils from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  NpmSnapFileNames,\n  SnapManifest,\n  readJsonFile,\n  satisfiesVersionRange,\n  NpmSnapPackageJson,\n} from '@metamask/snap-utils';\nimport { YargsArgs } from '../../types/yargs';\nimport { logError } from '../../utils';\nimport {\n  cloneTemplate,\n  gitInit,\n  isGitInstalled,\n  isInGitRepository,\n  prepareWorkingDirectory,\n  SNAP_LOCATION,\n  yarnInstall,\n} from './initUtils';\n\nconst SATISFIED_VERSION = '>=16';\n\n/**\n * Creates a new snap package, based on one of the provided templates. This\n * creates all the necessary files, like `package.json`, `snap.config.js`, etc.\n * to start developing a snap.\n *\n * @param argv - The Yargs arguments object.\n * @returns The Yargs arguments augmented with the new `dist`, `outfileName` and\n * `src` properties.\n * @throws If initialization of the snap package failed.\n */\nexport async function initHandler(argv: YargsArgs) {\n  const { directory } = argv;\n\n  const isVersionSupported = satisfiesVersionRange(\n    process.version,\n    SATISFIED_VERSION,\n  );\n\n  if (!isVersionSupported) {\n    logError(\n      `Init Error: You are using an outdated version of Node (${process.version}). Please update to Node ${SATISFIED_VERSION}.`,\n    );\n    throw new Error('Outdated node version.');\n  }\n\n  const gitExists = isGitInstalled();\n  if (!gitExists) {\n    logError(\n      `Init Error: git is not installed. Please install git to continue.`,\n    );\n    throw new Error('Git is not installed.');\n  }\n\n  const directoryToUse = directory\n    ? pathUtils.join(process.cwd(), directory)\n    : process.cwd();\n\n  console.log(`Preparing ${directoryToUse}...`);\n\n  await prepareWorkingDirectory(directoryToUse);\n\n  try {\n    console.log(`Cloning template...`);\n    await cloneTemplate(directoryToUse);\n\n    fs.rm(pathUtils.join(directoryToUse, '.git'), {\n      force: true,\n      recursive: true,\n    });\n  } catch (err) {\n    logError('Init Error: Failed to create template, cleaning...');\n    throw err;\n  }\n\n  console.log('Installing dependencies...');\n  await yarnInstall(directoryToUse);\n\n  if (!isInGitRepository(directoryToUse)) {\n    console.log('Initializing git repository...');\n    await gitInit(directoryToUse);\n  }\n\n  const snapLocation = pathUtils.join(directoryToUse, SNAP_LOCATION);\n\n  const manifest: SnapManifest = await readJsonFile(\n    pathUtils.join(snapLocation, NpmSnapFileNames.Manifest),\n  );\n  const packageJson: NpmSnapPackageJson = await readJsonFile(\n    pathUtils.join(snapLocation, NpmSnapFileNames.PackageJson),\n  );\n\n  const distPath = manifest.source.location.npm.filePath.split('/');\n\n  return {\n    ...argv,\n    dist: distPath[0],\n    outfileName: distPath[1],\n    src: packageJson.main || 'src/index.js',\n    snapLocation,\n  };\n}\n"]}