{"version":3,"file":"initUtils.js","sourceRoot":"","sources":["../../../src/cmds/init/initUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs';\nimport { execSync } from 'child_process';\nimport pathUtils from 'path';\nimport { logError } from '../../utils';\n\nexport const TEMPLATE_GIT_URL =\n  'https://github.com/MetaMask/template-snap-monorepo.git';\n\nexport const SNAP_LOCATION = 'packages/snap/';\n\n/**\n * Checks if the destination folder exists and if it's empty. Otherwise create it.\n *\n * @param directory - The desination folder.\n */\nexport async function prepareWorkingDirectory(\n  directory: string,\n): Promise<void> {\n  try {\n    const isCurrentDirectory = directory === process.cwd();\n\n    if (!isCurrentDirectory) {\n      try {\n        await fs.mkdir(directory, { recursive: true });\n      } catch (err) {\n        logError('Init Error: Failed to create new directory.', err);\n        throw err;\n      }\n    }\n\n    const existingFiles = await fs.readdir(directory);\n\n    if (existingFiles.length > 0) {\n      throw new Error(`Directory not empty: ${directory}.`);\n    }\n  } catch (err) {\n    logError('Init Error: Failed to prepare working directory.', err);\n    throw err;\n  }\n}\n\n/**\n * Clones the template in a directory.\n *\n * @param directory - The directory to clone the template in.\n */\nexport async function cloneTemplate(directory: string) {\n  try {\n    execSync(`git clone --depth=1 ${TEMPLATE_GIT_URL} ${directory}`, {\n      stdio: [2],\n    });\n  } catch (err) {\n    logError('Init Error: Failed to clone the template.', err);\n    throw err;\n  }\n}\n\n/**\n * Check if git is installed.\n *\n * @returns True if git is installed, or false otherwise.\n */\nexport function isGitInstalled() {\n  try {\n    execSync('git --version', { stdio: 'ignore' });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Check if the actual working dir is a git repository.\n *\n * @param directory - The directory to check.\n * @returns True if it's a git repository otherwise false.\n */\nexport function isInGitRepository(directory: string) {\n  try {\n    execSync('git rev-parse --is-inside-work-tree', {\n      stdio: 'ignore',\n      cwd: pathUtils.resolve(__dirname, directory),\n    });\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Init a git repository.\n *\n * @param directory - The directory to init.\n */\nexport async function gitInit(directory: string) {\n  try {\n    execSync('git init', {\n      stdio: 'ignore',\n      cwd: pathUtils.resolve(__dirname, directory),\n    });\n  } catch (err) {\n    logError('Init Error: Failed to init a new git repository.', err);\n    throw err;\n  }\n}\n\n/**\n * Install dependencies in a yarn project.\n *\n * @param directory - The directory containing the project.\n */\nexport async function yarnInstall(directory: string) {\n  try {\n    execSync('yarn install', {\n      stdio: [0, 1, 2],\n      cwd: pathUtils.resolve(__dirname, directory),\n    });\n  } catch (err) {\n    logError('Init Error: Failed to install dependencies.', err);\n    throw err;\n  }\n}\n"]}