{"version":3,"file":"snap.js","mappings":";;;EACA;;;ICAAA;MACA;QACA;UACAC;YAAyCC,gBAAzC;YAAyCC;UAAzC;QACA;MACA;IACA,CANA;;;;ICDAH;;;;ICCAA;MACA;QACAC;UAAuDG;QAAvD;MACA;;MACAH;QAAgDG;MAAhD;IACA,CALA;;;;;;;;;;;ECYO,MAAMC,YAAiC,GAAG,CAAC;IAAEC,MAAF;IAAUC;EAAV,CAAD,KAAyB;IACxE,QAAQA,OAAO,CAACC,MAAhB;MACE,KAAK,OAAL;QACE,OAAOC,MAAM,CAACF,OAAPE,CAAe;UACpBD,MAAM,EAAE,aADY;UAEpBE,MAAM,EAAE,CACN;YACEC,IAAI,EAAE,OADR;YAEEC,OAAO,EAAG,UAASN,MAAO;UAF5B,CADM;QAFY,CAAfG,CAAP;;MASF,KAAK,QAAL;QACE,OAAOA,MAAM,CAACF,OAAPE,CAAe;UACpBD,MAAM,EAAE,aADY;UAEpBE,MAAM,EAAE,CACN;YACEC,IAAI,EAAE,QADR;YAEEC,OAAO,EAAG,UAASN,MAAO;UAF5B,CADM;QAFY,CAAfG,CAAP;;MASF;QACE,MAAM,IAAII,KAAJ,CAAU,mBAAV,CAAN;IAtBJ;EADK","names":["__webpack_require__","Object","enumerable","get","value","onRpcRequest","origin","request","method","wallet","params","type","message","Error"],"sourceRoot":"","sources":["webpack://webpack-snap/webpack/bootstrap","webpack://webpack-snap/webpack/runtime/define property getters","webpack://webpack-snap/webpack/runtime/hasOwnProperty shorthand","webpack://webpack-snap/webpack/runtime/make namespace object","webpack://webpack-snap/./src/snap.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { OnRpcRequestHandler } from '@metamask/snap-types';\n\n/**\n * Handle incoming JSON-RPC requests, sent through `wallet_invokeSnap`.\n *\n * @param args - The request handler args as object.\n * @param args.origin - The origin of the request, e.g., the website that\n * invoked the snap.\n * @param args.request - A validated JSON-RPC request object.\n * @returns `null` if the request succeeded.\n * @throws If the request method is not valid for this snap.\n * @throws If the `snap_notify` call failed.\n */\nexport const onRpcRequest: OnRpcRequestHandler = ({ origin, request }) => {\n  switch (request.method) {\n    case 'inApp':\n      return wallet.request({\n        method: 'snap_notify',\n        params: [\n          {\n            type: 'inApp',\n            message: `Hello, ${origin}!`,\n          },\n        ],\n      });\n    case 'native':\n      return wallet.request({\n        method: 'snap_notify',\n        params: [\n          {\n            type: 'native',\n            message: `Hello, ${origin}!`,\n          },\n        ],\n      });\n    default:\n      throw new Error('Method not found.');\n  }\n};\n"]}