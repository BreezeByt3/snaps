{"version":3,"sources":["../../../src/permitted/invokeKeyring.ts"],"sourcesContent":["import type { Snap } from '@metamask/snaps-utils';\nimport {\n  HandlerType,\n  WALLET_SNAP_PERMISSION_KEY,\n  type SnapId,\n  type SnapRpcHookArgs,\n} from '@metamask/snaps-utils';\nimport type {\n  PermittedHandlerExport,\n  PendingJsonRpcResponse,\n  JsonRpcEngineEndCallback,\n  JsonRpcRequest,\n} from '@metamask/types';\nimport { hasProperty, type Json } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\n\nimport type { MethodHooksObject } from '../utils';\nimport type { InvokeSnapSugarArgs } from './invokeSnapSugar';\nimport { getValidatedParams } from './invokeSnapSugar';\n\nconst hookNames: MethodHooksObject<InvokeKeyringHooks> = {\n  hasPermission: true,\n  handleSnapRpcRequest: true,\n  getSnap: true,\n  getAllowedKeyringMethods: true,\n};\n\n/**\n * `wallet_invokeKeyring` gets the requester's permitted and installed Snaps.\n */\nexport const invokeKeyringHandler: PermittedHandlerExport<\n  InvokeKeyringHooks,\n  JsonRpcRequest<unknown>,\n  unknown\n> = {\n  methodNames: ['wallet_invokeKeyring'],\n  implementation: invokeKeyringImplementation,\n  hookNames,\n};\n\nexport type InvokeKeyringHooks = {\n  hasPermission: (origin: string, permissionName: string) => boolean;\n\n  handleSnapRpcRequest: ({\n    snapId,\n    origin,\n    handler,\n    request,\n  }: SnapRpcHookArgs & { snapId: SnapId }) => Promise<unknown>;\n\n  getSnap: (snapId: SnapId) => Snap | undefined;\n\n  getAllowedKeyringMethods: (origin: string) => string[];\n};\n\n/**\n * The `wallet_invokeKeyring` method implementation.\n * Invokes onKeyringRequest if the snap requested is installed and connected to the dapp.\n *\n * @param req - The JSON-RPC request object.\n * @param res - The JSON-RPC response object.\n * @param _next - The `json-rpc-engine` \"next\" callback. Not used by this\n * function.\n * @param end - The `json-rpc-engine` \"end\" callback.\n * @param hooks - The RPC method hooks.\n * @param hooks.handleSnapRpcRequest - Invokes a snap with a given RPC request.\n * @param hooks.hasPermission - Checks whether a given origin has a given permission.\n * @param hooks.getSnap - Gets information about a given snap.\n * @param hooks.getAllowedKeyringMethods - Get the list of allowed Keyring\n * methods for a given origin.\n * @returns Nothing.\n */\nasync function invokeKeyringImplementation(\n  req: JsonRpcRequest<unknown>,\n  res: PendingJsonRpcResponse<unknown>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  {\n    handleSnapRpcRequest,\n    hasPermission,\n    getSnap,\n    getAllowedKeyringMethods,\n  }: InvokeKeyringHooks,\n): Promise<void> {\n  let params: InvokeSnapSugarArgs;\n  try {\n    params = getValidatedParams(req.params);\n  } catch (error) {\n    return end(error);\n  }\n\n  // We expect the MM middleware stack to always add the origin to requests\n  const { origin } = req as JsonRpcRequest<unknown> & { origin: string };\n  const { snapId, request } = params;\n\n  if (!origin || !hasPermission(origin, WALLET_SNAP_PERMISSION_KEY)) {\n    return end(\n      ethErrors.rpc.invalidRequest({\n        message: `The snap \"${snapId}\" is not connected to \"${origin}\". Please connect before invoking the snap.`,\n      }),\n    );\n  }\n\n  if (!getSnap(snapId)) {\n    return end(\n      ethErrors.rpc.invalidRequest({\n        message: `The snap \"${snapId}\" is not installed. Please install it first, before invoking the snap.`,\n      }),\n    );\n  }\n\n  if (!hasProperty(request, 'method') || typeof request.method !== 'string') {\n    return end(\n      ethErrors.rpc.invalidRequest({\n        message: 'The request must have a method.',\n      }),\n    );\n  }\n\n  const allowedMethods = getAllowedKeyringMethods(origin);\n  if (!allowedMethods.includes(request.method)) {\n    return end(\n      ethErrors.rpc.invalidRequest({\n        message: `The origin \"${origin}\" is not allowed to invoke the method \"${request.method}\".`,\n      }),\n    );\n  }\n\n  try {\n    res.result = (await handleSnapRpcRequest({\n      snapId,\n      origin,\n      request,\n      handler: HandlerType.OnKeyringRequest,\n    })) as Json;\n  } catch (error) {\n    return end(error);\n  }\n\n  return end();\n}\n"],"names":["invokeKeyringHandler","hookNames","hasPermission","handleSnapRpcRequest","getSnap","getAllowedKeyringMethods","methodNames","implementation","invokeKeyringImplementation","req","res","_next","end","params","getValidatedParams","error","origin","snapId","request","WALLET_SNAP_PERMISSION_KEY","ethErrors","rpc","invalidRequest","message","hasProperty","method","allowedMethods","includes","result","handler","HandlerType","OnKeyringRequest"],"mappings":";;;;+BA8BaA;;;eAAAA;;;4BAxBN;uBAOgC;8BACb;iCAIS;AAEnC,MAAMC,YAAmD;IACvDC,eAAe;IACfC,sBAAsB;IACtBC,SAAS;IACTC,0BAA0B;AAC5B;AAKO,MAAML,uBAIT;IACFM,aAAa;QAAC;KAAuB;IACrCC,gBAAgBC;IAChBP;AACF;AAiBA;;;;;;;;;;;;;;;;CAgBC,GACD,eAAeO,4BACbC,GAA4B,EAC5BC,GAAoC,EACpCC,KAAc,EACdC,GAA6B,EAC7B,EACET,oBAAoB,EACpBD,aAAa,EACbE,OAAO,EACPC,wBAAwB,EACL;IAErB,IAAIQ;IACJ,IAAI;QACFA,SAASC,IAAAA,mCAAkB,EAACL,IAAII,MAAM;IACxC,EAAE,OAAOE,OAAO;QACd,OAAOH,IAAIG;IACb;IAEA,yEAAyE;IACzE,MAAM,EAAEC,MAAM,EAAE,GAAGP;IACnB,MAAM,EAAEQ,MAAM,EAAEC,OAAO,EAAE,GAAGL;IAE5B,IAAI,CAACG,UAAU,CAACd,cAAcc,QAAQG,sCAA0B,GAAG;QACjE,OAAOP,IACLQ,uBAAS,CAACC,GAAG,CAACC,cAAc,CAAC;YAC3BC,SAAS,CAAC,UAAU,EAAEN,OAAO,uBAAuB,EAAED,OAAO,2CAA2C,CAAC;QAC3G;IAEJ;IAEA,IAAI,CAACZ,QAAQa,SAAS;QACpB,OAAOL,IACLQ,uBAAS,CAACC,GAAG,CAACC,cAAc,CAAC;YAC3BC,SAAS,CAAC,UAAU,EAAEN,OAAO,sEAAsE,CAAC;QACtG;IAEJ;IAEA,IAAI,CAACO,IAAAA,kBAAW,EAACN,SAAS,aAAa,OAAOA,QAAQO,MAAM,KAAK,UAAU;QACzE,OAAOb,IACLQ,uBAAS,CAACC,GAAG,CAACC,cAAc,CAAC;YAC3BC,SAAS;QACX;IAEJ;IAEA,MAAMG,iBAAiBrB,yBAAyBW;IAChD,IAAI,CAACU,eAAeC,QAAQ,CAACT,QAAQO,MAAM,GAAG;QAC5C,OAAOb,IACLQ,uBAAS,CAACC,GAAG,CAACC,cAAc,CAAC;YAC3BC,SAAS,CAAC,YAAY,EAAEP,OAAO,uCAAuC,EAAEE,QAAQO,MAAM,CAAC,EAAE,CAAC;QAC5F;IAEJ;IAEA,IAAI;QACFf,IAAIkB,MAAM,GAAI,MAAMzB,qBAAqB;YACvCc;YACAD;YACAE;YACAW,SAASC,uBAAW,CAACC,gBAAgB;QACvC;IACF,EAAE,OAAOhB,OAAO;QACd,OAAOH,IAAIG;IACb;IAEA,OAAOH;AACT"}