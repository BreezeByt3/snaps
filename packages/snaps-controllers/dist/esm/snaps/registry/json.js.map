{"version":3,"sources":["../../../../src/snaps/registry/json.ts"],"sourcesContent":["import type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseControllerV2 as BaseController } from '@metamask/base-controller';\nimport type { SnapsRegistryDatabase } from '@metamask/snaps-registry';\nimport { verify } from '@metamask/snaps-registry';\nimport type { SnapId } from '@metamask/snaps-utils';\nimport type { Hex } from '@metamask/utils';\nimport {\n  assert,\n  Duration,\n  inMilliseconds,\n  satisfiesVersionRange,\n} from '@metamask/utils';\n\nimport type {\n  SnapsRegistry,\n  SnapsRegistryInfo,\n  SnapsRegistryMetadata,\n  SnapsRegistryRequest,\n  SnapsRegistryResult,\n} from './registry';\nimport { SnapsRegistryStatus } from './registry';\n\n// TODO: Replace with a Codefi URL\nconst SNAP_REGISTRY_URL =\n  'https://cdn.jsdelivr.net/gh/MetaMask/snaps-registry@gh-pages/latest/registry.json';\n\nconst SNAP_REGISTRY_SIGNATURE_URL =\n  'https://cdn.jsdelivr.net/gh/MetaMask/snaps-registry@gh-pages/latest/signature.json';\n\ntype JsonSnapsRegistryUrl = {\n  registry: string;\n  signature: string;\n};\n\nexport type JsonSnapsRegistryArgs = {\n  messenger: SnapsRegistryMessenger;\n  state?: SnapsRegistryState;\n  fetchFunction?: typeof fetch;\n  url?: JsonSnapsRegistryUrl;\n  recentFetchThreshold?: number;\n  refetchOnAllowlistMiss?: boolean;\n  failOnUnavailableRegistry?: boolean;\n  publicKey?: Hex;\n};\n\nexport type GetResult = {\n  type: `${typeof controllerName}:get`;\n  handler: SnapsRegistry['get'];\n};\n\nexport type GetMetadata = {\n  type: `${typeof controllerName}:getMetadata`;\n  handler: SnapsRegistry['getMetadata'];\n};\n\nexport type Update = {\n  type: `${typeof controllerName}:update`;\n  handler: SnapsRegistry['update'];\n};\n\nexport type SnapsRegistryActions = GetResult | GetMetadata | Update;\n\nexport type SnapsRegistryEvents = never;\n\nexport type SnapsRegistryMessenger = RestrictedControllerMessenger<\n  'SnapsRegistry',\n  SnapsRegistryActions,\n  SnapsRegistryEvents,\n  SnapsRegistryActions['type'],\n  SnapsRegistryEvents['type']\n>;\n\nexport type SnapsRegistryState = {\n  database: SnapsRegistryDatabase | null;\n  lastUpdated: number | null;\n};\n\nconst controllerName = 'SnapsRegistry';\n\nconst defaultState = {\n  database: null,\n  lastUpdated: null,\n};\n\nexport class JsonSnapsRegistry extends BaseController<\n  typeof controllerName,\n  SnapsRegistryState,\n  SnapsRegistryMessenger\n> {\n  #url: JsonSnapsRegistryUrl;\n\n  #publicKey?: Hex;\n\n  #fetchFunction: typeof fetch;\n\n  #recentFetchThreshold: number;\n\n  #refetchOnAllowlistMiss: boolean;\n\n  #failOnUnavailableRegistry: boolean;\n\n  #currentUpdate: Promise<void> | null;\n\n  constructor({\n    messenger,\n    state,\n    url = {\n      registry: SNAP_REGISTRY_URL,\n      signature: SNAP_REGISTRY_SIGNATURE_URL,\n    },\n    publicKey,\n    fetchFunction = globalThis.fetch.bind(globalThis),\n    recentFetchThreshold = inMilliseconds(5, Duration.Minute),\n    failOnUnavailableRegistry = true,\n    refetchOnAllowlistMiss = true,\n  }: JsonSnapsRegistryArgs) {\n    super({\n      messenger,\n      metadata: {\n        database: { persist: true, anonymous: false },\n        lastUpdated: { persist: true, anonymous: false },\n      },\n      name: controllerName,\n      state: {\n        ...defaultState,\n        ...state,\n      },\n    });\n    this.#url = url;\n    this.#publicKey = publicKey;\n    this.#fetchFunction = fetchFunction;\n    this.#recentFetchThreshold = recentFetchThreshold;\n    this.#refetchOnAllowlistMiss = refetchOnAllowlistMiss;\n    this.#failOnUnavailableRegistry = failOnUnavailableRegistry;\n    this.#currentUpdate = null;\n\n    this.messagingSystem.registerActionHandler(\n      'SnapsRegistry:get',\n      async (...args) => this.#get(...args),\n    );\n    this.messagingSystem.registerActionHandler(\n      'SnapsRegistry:getMetadata',\n      async (...args) => this.#getMetadata(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      'SnapsRegistry:update',\n      async () => this.#triggerUpdate(),\n    );\n  }\n\n  #wasRecentlyFetched() {\n    return (\n      this.state.lastUpdated &&\n      Date.now() - this.state.lastUpdated < this.#recentFetchThreshold\n    );\n  }\n\n  /**\n   * Triggers an update of the registry database.\n   *\n   * If an existing update is in progress this function will await that update.\n   */\n  async #triggerUpdate() {\n    // If an update is ongoing, wait for that.\n    if (this.#currentUpdate) {\n      await this.#currentUpdate;\n      return;\n    }\n    // If no update exists, create promise and store globally.\n    if (this.#currentUpdate === null) {\n      this.#currentUpdate = this.#update();\n    }\n    await this.#currentUpdate;\n    this.#currentUpdate = null;\n  }\n\n  /**\n   * Updates the registry database if the registry hasn't been updated recently.\n   *\n   * NOTE: SHOULD NOT be called directly, instead `triggerUpdate` should be used.\n   */\n  async #update() {\n    // No-op if we recently fetched the registry.\n    if (this.#wasRecentlyFetched()) {\n      return;\n    }\n\n    try {\n      const database = await this.#safeFetch(this.#url.registry);\n\n      if (this.#publicKey) {\n        const signature = await this.#safeFetch(this.#url.signature);\n        await this.#verifySignature(database, signature);\n      }\n\n      this.update((state) => {\n        state.database = JSON.parse(database);\n        state.lastUpdated = Date.now();\n      });\n    } catch {\n      // Ignore\n    }\n  }\n\n  async #getDatabase(): Promise<SnapsRegistryDatabase | null> {\n    if (this.state.database === null) {\n      await this.#triggerUpdate();\n    }\n\n    // If the database is still null and we require it, throw.\n    if (this.#failOnUnavailableRegistry && this.state.database === null) {\n      throw new Error('Snaps registry is unavailable, installation blocked.');\n    }\n    return this.state.database;\n  }\n\n  async #getSingle(\n    snapId: SnapId,\n    snapInfo: SnapsRegistryInfo,\n    refetch = false,\n  ): Promise<SnapsRegistryResult> {\n    const database = await this.#getDatabase();\n\n    const blockedEntry = database?.blockedSnaps.find((blocked) => {\n      if ('id' in blocked) {\n        return (\n          blocked.id === snapId &&\n          satisfiesVersionRange(snapInfo.version, blocked.versionRange)\n        );\n      }\n\n      return blocked.checksum === snapInfo.checksum;\n    });\n\n    if (blockedEntry) {\n      return {\n        status: SnapsRegistryStatus.Blocked,\n        reason: blockedEntry.reason,\n      };\n    }\n\n    const verified = database?.verifiedSnaps[snapId];\n    const version = verified?.versions?.[snapInfo.version];\n    if (version && version.checksum === snapInfo.checksum) {\n      return { status: SnapsRegistryStatus.Verified };\n    }\n    // For now, if we have an allowlist miss, we can refetch once and try again.\n    if (this.#refetchOnAllowlistMiss && !refetch) {\n      await this.#triggerUpdate();\n      return this.#getSingle(snapId, snapInfo, true);\n    }\n    return { status: SnapsRegistryStatus.Unverified };\n  }\n\n  async #get(\n    snaps: SnapsRegistryRequest,\n  ): Promise<Record<SnapId, SnapsRegistryResult>> {\n    return Object.entries(snaps).reduce<\n      Promise<Record<SnapId, SnapsRegistryResult>>\n    >(async (previousPromise, [snapId, snapInfo]) => {\n      const result = await this.#getSingle(snapId, snapInfo);\n      const acc = await previousPromise;\n      acc[snapId] = result;\n      return acc;\n    }, Promise.resolve({}));\n  }\n\n  /**\n   * Get metadata for the given snap ID.\n   *\n   * @param snapId - The ID of the snap to get metadata for.\n   * @returns The metadata for the given snap ID, or `null` if the snap is not\n   * verified.\n   */\n  async #getMetadata(snapId: SnapId): Promise<SnapsRegistryMetadata | null> {\n    const database = await this.#getDatabase();\n    return database?.verifiedSnaps[snapId]?.metadata ?? null;\n  }\n\n  /**\n   * Verify the signature of the registry.\n   *\n   * @param database - The registry database.\n   * @param signature - The signature of the registry.\n   * @throws If the signature is invalid.\n   * @private\n   */\n  async #verifySignature(database: string, signature: string) {\n    assert(this.#publicKey, 'No public key provided.');\n\n    const valid = await verify({\n      registry: database,\n      signature: JSON.parse(signature),\n      publicKey: this.#publicKey,\n    });\n\n    assert(valid, 'Invalid registry signature.');\n  }\n\n  /**\n   * Fetch the given URL, throwing if the response is not OK.\n   *\n   * @param url - The URL to fetch.\n   * @returns The response body.\n   * @private\n   */\n  async #safeFetch(url: string) {\n    const response = await this.#fetchFunction(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch ${url}.`);\n    }\n\n    return await response.text();\n  }\n}\n"],"names":["BaseControllerV2","BaseController","verify","assert","Duration","inMilliseconds","satisfiesVersionRange","SnapsRegistryStatus","SNAP_REGISTRY_URL","SNAP_REGISTRY_SIGNATURE_URL","controllerName","defaultState","database","lastUpdated","JsonSnapsRegistry","constructor","messenger","state","url","registry","signature","publicKey","fetchFunction","globalThis","fetch","bind","recentFetchThreshold","Minute","failOnUnavailableRegistry","refetchOnAllowlistMiss","metadata","persist","anonymous","name","currentUpdate","messagingSystem","registerActionHandler","args","get","getMetadata","triggerUpdate","Date","now","update","wasRecentlyFetched","safeFetch","verifySignature","JSON","parse","Error","snapId","snapInfo","refetch","getDatabase","blockedEntry","blockedSnaps","find","blocked","id","version","versionRange","checksum","status","Blocked","reason","verified","verifiedSnaps","versions","Verified","getSingle","Unverified","snaps","Object","entries","reduce","previousPromise","result","acc","Promise","resolve","valid","response","ok","text"],"mappings":"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"}