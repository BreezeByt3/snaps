{"version":3,"sources":["../../../src/common/BaseSnapExecutor.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/triple-slash-reference, spaced-comment\n/// <reference path=\"../../../../node_modules/ses/types.d.ts\" />\nimport { StreamProvider } from '@metamask/providers';\nimport type { RequestArguments } from '@metamask/providers/dist/BaseProvider';\nimport type { SnapsGlobalObject } from '@metamask/rpc-methods';\nimport type {\n  SnapExports,\n  HandlerType,\n  SnapExportsParameters,\n} from '@metamask/snaps-utils';\nimport {\n  SNAP_EXPORT_NAMES,\n  logError,\n  SNAP_EXPORTS,\n} from '@metamask/snaps-utils';\nimport type {\n  JsonRpcNotification,\n  JsonRpcId,\n  JsonRpcRequest,\n  Json,\n} from '@metamask/utils';\nimport {\n  isObject,\n  isValidJson,\n  assert,\n  isJsonRpcRequest,\n  hasProperty,\n  getSafeJson,\n} from '@metamask/utils';\nimport { errorCodes, ethErrors, serializeError } from 'eth-rpc-errors';\nimport { createIdRemapMiddleware } from 'json-rpc-engine';\nimport type { Duplex } from 'stream';\nimport { validate } from 'superstruct';\n\nimport { log } from '../logging';\nimport type { CommandMethodsMapping } from './commands';\nimport { getCommandMethodImplementations } from './commands';\nimport { createEndowments } from './endowments';\nimport { addEventListener, removeEventListener } from './globalEvents';\nimport { sortParamKeys } from './sortParams';\nimport {\n  assertEthereumOutboundRequest,\n  assertSnapOutboundRequest,\n  constructError,\n  sanitizeRequestArguments,\n  proxyStreamProvider,\n  withTeardown,\n} from './utils';\nimport {\n  ExecuteSnapRequestArgumentsStruct,\n  PingRequestArgumentsStruct,\n  SnapRpcRequestArgumentsStruct,\n  TerminateRequestArgumentsStruct,\n} from './validation';\n\ntype EvaluationData = {\n  stop: () => void;\n};\n\ntype SnapData = {\n  exports: SnapExports;\n  runningEvaluations: Set<EvaluationData>;\n  idleTeardown: () => Promise<void>;\n};\n\nconst fallbackError = {\n  code: errorCodes.rpc.internal,\n  message: 'Execution Environment Error',\n};\n\nexport type InvokeSnapArgs = Omit<SnapExportsParameters[0], 'chainId'>;\n\nexport type InvokeSnap = (\n  target: string,\n  handler: HandlerType,\n  args: InvokeSnapArgs | undefined,\n) => Promise<Json>;\n\n/**\n * The supported methods in the execution environment. The validator checks the\n * incoming JSON-RPC request, and the `params` property is used for sorting the\n * parameters, if they are an object.\n */\nconst EXECUTION_ENVIRONMENT_METHODS = {\n  ping: {\n    struct: PingRequestArgumentsStruct,\n    params: [],\n  },\n  executeSnap: {\n    struct: ExecuteSnapRequestArgumentsStruct,\n    params: ['snapId', 'sourceCode', 'endowments'],\n  },\n  terminate: {\n    struct: TerminateRequestArgumentsStruct,\n    params: [],\n  },\n  snapRpc: {\n    struct: SnapRpcRequestArgumentsStruct,\n    params: ['target', 'handler', 'origin', 'request'],\n  },\n};\n\ntype Methods = typeof EXECUTION_ENVIRONMENT_METHODS;\n\nexport class BaseSnapExecutor {\n  private readonly snapData: Map<string, SnapData>;\n\n  private readonly commandStream: Duplex;\n\n  private readonly rpcStream: Duplex;\n\n  private readonly methods: CommandMethodsMapping;\n\n  private snapErrorHandler?: (event: ErrorEvent) => void;\n\n  private snapPromiseErrorHandler?: (event: PromiseRejectionEvent) => void;\n\n  private lastTeardown = 0;\n\n  protected constructor(commandStream: Duplex, rpcStream: Duplex) {\n    this.snapData = new Map();\n    this.commandStream = commandStream;\n    this.commandStream.on('data', (data) => {\n      this.onCommandRequest(data).catch((error) => {\n        // TODO: Decide how to handle errors.\n        logError(error);\n      });\n    });\n    this.rpcStream = rpcStream;\n\n    this.methods = getCommandMethodImplementations(\n      this.startSnap.bind(this),\n      async (target, handlerType, args) => {\n        const data = this.snapData.get(target);\n        // We're capturing the handler in case someone modifies the data object\n        // before the call.\n        const handler = data?.exports[handlerType];\n        const { required } = SNAP_EXPORTS[handlerType];\n\n        assert(\n          !required || handler !== undefined,\n          `No ${handlerType} handler exported for snap \"${target}`,\n        );\n\n        // Certain handlers are not required. If they are not exported, we\n        // return null.\n        if (!handler) {\n          return null;\n        }\n\n        // TODO: fix handler args type cast\n        let result = await this.executeInSnapContext(target, () =>\n          handler(args as any),\n        );\n\n        // The handler might not return anything, but undefined is not valid JSON.\n        if (result === undefined) {\n          result = null;\n        }\n\n        // /!\\ Always return only sanitized JSON to prevent security flaws. /!\\\n        try {\n          return getSafeJson(result);\n        } catch (error) {\n          throw new TypeError(\n            `Received non-JSON-serializable value: ${error.message.replace(\n              /^Assertion failed: /u,\n              '',\n            )}`,\n          );\n        }\n      },\n      this.onTerminate.bind(this),\n    );\n  }\n\n  private errorHandler(error: unknown, data: Record<string, Json>) {\n    const constructedError = constructError(error);\n    const serializedError = serializeError(constructedError, {\n      fallbackError,\n      shouldIncludeStack: false,\n    });\n\n    // We're setting it this way to avoid sentData.stack = undefined\n    const sentData: Json = { ...data, stack: constructedError?.stack ?? null };\n\n    this.notify({\n      method: 'UnhandledError',\n      params: {\n        error: {\n          ...serializedError,\n          data: sentData,\n        },\n      },\n    });\n  }\n\n  private async onCommandRequest(message: JsonRpcRequest) {\n    if (!isJsonRpcRequest(message)) {\n      throw new Error('Command stream received a non-JSON-RPC request.');\n    }\n\n    const { id, method, params } = message;\n\n    if (!hasProperty(EXECUTION_ENVIRONMENT_METHODS, method)) {\n      this.respond(id, {\n        error: ethErrors.rpc\n          .methodNotFound({\n            data: {\n              method,\n            },\n          })\n          .serialize(),\n      });\n      return;\n    }\n\n    const methodObject = EXECUTION_ENVIRONMENT_METHODS[method as keyof Methods];\n\n    // support params by-name and by-position\n    const paramsAsArray = sortParamKeys(methodObject.params, params);\n\n    const [error] = validate<any, any>(paramsAsArray, methodObject.struct);\n    if (error) {\n      this.respond(id, {\n        error: ethErrors.rpc\n          .invalidParams({\n            message: `Invalid parameters for method \"${method}\": ${error.message}.`,\n            data: {\n              method,\n              params: paramsAsArray,\n            },\n          })\n          .serialize(),\n      });\n      return;\n    }\n\n    try {\n      const result = await (this.methods as any)[method](...paramsAsArray);\n      this.respond(id, { result });\n    } catch (rpcError) {\n      this.respond(id, {\n        error: serializeError(rpcError, {\n          fallbackError,\n        }),\n      });\n    }\n  }\n\n  protected notify(requestObject: Omit<JsonRpcNotification, 'jsonrpc'>) {\n    if (!isValidJson(requestObject) || !isObject(requestObject)) {\n      throw new Error(\n        'JSON-RPC notifications must be JSON serializable objects',\n      );\n    }\n\n    this.commandStream.write({\n      ...requestObject,\n      jsonrpc: '2.0',\n    });\n  }\n\n  protected respond(id: JsonRpcId, requestObject: Record<string, unknown>) {\n    if (!isValidJson(requestObject) || !isObject(requestObject)) {\n      // Instead of throwing, we directly respond with an error.\n      // This prevents an issue where we wouldn't respond when errors were non-serializable\n      this.commandStream.write({\n        error: serializeError(\n          new Error('JSON-RPC responses must be JSON serializable objects.'),\n          {\n            fallbackError,\n          },\n        ),\n        id,\n        jsonrpc: '2.0',\n      });\n      return;\n    }\n\n    this.commandStream.write({\n      ...requestObject,\n      id,\n      jsonrpc: '2.0',\n    });\n  }\n\n  /**\n   * Attempts to evaluate a snap in SES. Generates APIs for the snap. May throw\n   * on errors.\n   *\n   * @param snapId - The id of the snap.\n   * @param sourceCode - The source code of the snap, in IIFE format.\n   * @param _endowments - An array of the names of the endowments.\n   */\n  protected async startSnap(\n    snapId: string,\n    sourceCode: string,\n    _endowments?: string[],\n  ): Promise<void> {\n    log(`Starting snap '${snapId}' in worker.`);\n    if (this.snapPromiseErrorHandler) {\n      removeEventListener('unhandledrejection', this.snapPromiseErrorHandler);\n    }\n\n    if (this.snapErrorHandler) {\n      removeEventListener('error', this.snapErrorHandler);\n    }\n\n    this.snapErrorHandler = (error: ErrorEvent) => {\n      this.errorHandler(error.error, { snapId });\n    };\n\n    this.snapPromiseErrorHandler = (error: PromiseRejectionEvent) => {\n      this.errorHandler(error instanceof Error ? error : error.reason, {\n        snapId,\n      });\n    };\n\n    const provider = new StreamProvider(this.rpcStream, {\n      jsonRpcStreamName: 'metamask-provider',\n      rpcMiddleware: [createIdRemapMiddleware()],\n    });\n\n    await provider.initialize();\n\n    const snap = this.createSnapGlobal(provider);\n    const ethereum = this.createEIP1193Provider(provider);\n    // We specifically use any type because the Snap can modify the object any way they want\n    const snapModule: any = { exports: {} };\n\n    try {\n      const { endowments, teardown: endowmentTeardown } = createEndowments(\n        snap,\n        ethereum,\n        snapId,\n        _endowments,\n      );\n\n      // !!! Ensure that this is the only place the data is being set.\n      // Other methods access the object value and mutate its properties.\n      this.snapData.set(snapId, {\n        idleTeardown: endowmentTeardown,\n        runningEvaluations: new Set(),\n        exports: {},\n      });\n\n      addEventListener('unhandledRejection', this.snapPromiseErrorHandler);\n      addEventListener('error', this.snapErrorHandler);\n\n      const compartment = new Compartment({\n        ...endowments,\n        module: snapModule,\n        exports: snapModule.exports,\n      });\n      // All of those are JavaScript runtime specific and self referential,\n      // but we add them for compatibility sake with external libraries.\n      //\n      // We can't do that in the injected globals object above\n      // because SES creates its own globalThis\n      compartment.globalThis.self = compartment.globalThis;\n      compartment.globalThis.global = compartment.globalThis;\n      compartment.globalThis.window = compartment.globalThis;\n\n      await this.executeInSnapContext(snapId, () => {\n        compartment.evaluate(sourceCode);\n        this.registerSnapExports(snapId, snapModule);\n      });\n    } catch (error) {\n      this.removeSnap(snapId);\n      throw new Error(\n        `Error while running snap '${snapId}': ${(error as Error).message}`,\n      );\n    }\n  }\n\n  /**\n   * Cancels all running evaluations of all snaps and clears all snap data.\n   * NOTE:** Should only be called in response to the `terminate` RPC command.\n   */\n  protected onTerminate() {\n    // `stop()` tears down snap endowments.\n    // Teardown will also be run for each snap as soon as there are\n    // no more running evaluations for that snap.\n    this.snapData.forEach((data) =>\n      data.runningEvaluations.forEach((evaluation) => evaluation.stop()),\n    );\n    this.snapData.clear();\n  }\n\n  private registerSnapExports(snapId: string, snapModule: any) {\n    const data = this.snapData.get(snapId);\n    // Somebody deleted the snap before we could register.\n    if (!data) {\n      return;\n    }\n\n    data.exports = SNAP_EXPORT_NAMES.reduce((acc, exportName) => {\n      const snapExport = snapModule.exports[exportName];\n      const { validator } = SNAP_EXPORTS[exportName];\n      if (validator(snapExport)) {\n        return { ...acc, [exportName]: snapExport };\n      }\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Instantiates a snap API object (i.e. `globalThis.snap`).\n   *\n   * @param provider - A StreamProvider connected to MetaMask.\n   * @returns The snap provider object.\n   */\n  private createSnapGlobal(provider: StreamProvider): SnapsGlobalObject {\n    const originalRequest = provider.request.bind(provider);\n\n    const request = async (args: RequestArguments) => {\n      const sanitizedArgs = sanitizeRequestArguments(args);\n      assertSnapOutboundRequest(sanitizedArgs);\n      this.notify({ method: 'OutboundRequest' });\n      try {\n        return await withTeardown(originalRequest(sanitizedArgs), this as any);\n      } finally {\n        this.notify({ method: 'OutboundResponse' });\n      }\n    };\n\n    // Proxy target is intentionally set to be an empty object, to ensure\n    // that access to the prototype chain is not possible.\n    const snapGlobalProxy = new Proxy(\n      {},\n      {\n        has(_target: object, prop: string | symbol) {\n          return typeof prop === 'string' && ['request'].includes(prop);\n        },\n        get(_target, prop: keyof StreamProvider) {\n          if (prop === 'request') {\n            return request;\n          }\n\n          return undefined;\n        },\n      },\n    ) as SnapsGlobalObject;\n\n    return harden(snapGlobalProxy);\n  }\n\n  /**\n   * Instantiates an EIP-1193 Ethereum provider object (i.e. `globalThis.ethereum`).\n   *\n   * @param provider - A StreamProvider connected to MetaMask.\n   * @returns The EIP-1193 Ethereum provider object.\n   */\n  private createEIP1193Provider(provider: StreamProvider): StreamProvider {\n    const originalRequest = provider.request.bind(provider);\n\n    const request = async (args: RequestArguments) => {\n      const sanitizedArgs = sanitizeRequestArguments(args);\n      assertEthereumOutboundRequest(sanitizedArgs);\n      this.notify({ method: 'OutboundRequest' });\n      try {\n        return await withTeardown(originalRequest(sanitizedArgs), this as any);\n      } finally {\n        this.notify({ method: 'OutboundResponse' });\n      }\n    };\n\n    const streamProviderProxy = proxyStreamProvider(provider, request);\n\n    return harden(streamProviderProxy);\n  }\n\n  /**\n   * Removes the snap with the given name.\n   *\n   * @param snapId - The id of the snap to remove.\n   */\n  private removeSnap(snapId: string): void {\n    this.snapData.delete(snapId);\n  }\n\n  /**\n   * Calls the specified executor function in the context of the specified snap.\n   * Essentially, this means that the operation performed by the executor is\n   * counted as an evaluation of the specified snap. When the count of running\n   * evaluations of a snap reaches zero, its endowments are torn down.\n   *\n   * @param snapId - The id of the snap whose context to execute in.\n   * @param executor - The function that will be executed in the snap's context.\n   * @returns The executor's return value.\n   * @template Result - The return value of the executor.\n   */\n  private async executeInSnapContext<Result>(\n    snapId: string,\n    executor: () => Promise<Result> | Result,\n  ): Promise<Result> {\n    const data = this.snapData.get(snapId);\n    if (data === undefined) {\n      throw new Error(\n        `Tried to execute in context of unknown snap: \"${snapId}\".`,\n      );\n    }\n\n    let stop: () => void;\n    const stopPromise = new Promise<never>(\n      (_, reject) =>\n        (stop = () =>\n          reject(\n            // TODO(rekmarks): Specify / standardize error code for this case.\n            ethErrors.rpc.internal(\n              `The snap \"${snapId}\" has been terminated during execution.`,\n            ),\n          )),\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const evaluationData = { stop: stop! };\n\n    try {\n      data.runningEvaluations.add(evaluationData);\n      // Notice that we have to await this executor.\n      // If we didn't, we would decrease the amount of running evaluations\n      // before the promise actually resolves\n      return await Promise.race([executor(), stopPromise]);\n    } finally {\n      data.runningEvaluations.delete(evaluationData);\n\n      if (data.runningEvaluations.size === 0) {\n        this.lastTeardown += 1;\n        await data.idleTeardown();\n      }\n    }\n  }\n}\n"],"names":["BaseSnapExecutor","fallbackError","code","errorCodes","rpc","internal","message","EXECUTION_ENVIRONMENT_METHODS","ping","struct","PingRequestArgumentsStruct","params","executeSnap","ExecuteSnapRequestArgumentsStruct","terminate","TerminateRequestArgumentsStruct","snapRpc","SnapRpcRequestArgumentsStruct","errorHandler","error","data","constructedError","constructError","serializedError","serializeError","shouldIncludeStack","sentData","stack","notify","method","onCommandRequest","isJsonRpcRequest","Error","id","hasProperty","respond","ethErrors","methodNotFound","serialize","methodObject","paramsAsArray","sortParamKeys","validate","invalidParams","result","methods","rpcError","requestObject","isValidJson","isObject","commandStream","write","jsonrpc","startSnap","snapId","sourceCode","_endowments","log","snapPromiseErrorHandler","removeEventListener","snapErrorHandler","reason","provider","StreamProvider","rpcStream","jsonRpcStreamName","rpcMiddleware","createIdRemapMiddleware","initialize","snap","createSnapGlobal","ethereum","createEIP1193Provider","snapModule","exports","endowments","teardown","endowmentTeardown","createEndowments","snapData","set","idleTeardown","runningEvaluations","Set","addEventListener","compartment","Compartment","module","globalThis","self","global","window","executeInSnapContext","evaluate","registerSnapExports","removeSnap","onTerminate","forEach","evaluation","stop","clear","get","SNAP_EXPORT_NAMES","reduce","acc","exportName","snapExport","validator","SNAP_EXPORTS","originalRequest","request","bind","args","sanitizedArgs","sanitizeRequestArguments","assertSnapOutboundRequest","withTeardown","snapGlobalProxy","Proxy","has","_target","prop","includes","undefined","harden","assertEthereumOutboundRequest","streamProviderProxy","proxyStreamProvider","delete","executor","stopPromise","Promise","_","reject","evaluationData","add","race","size","lastTeardown","Map","on","catch","logError","getCommandMethodImplementations","target","handlerType","handler","required","assert","getSafeJson","TypeError","replace"],"mappings":"AAAA,qFAAqF;AACrF,gEAAgE;;;;;+BAuGnDA;;;eAAAA;;;2BAtGkB;4BAYxB;uBAcA;8BAC+C;+BACd;6BAEf;yBAEL;0BAE4B;4BACf;8BACqB;4BACxB;wBAQvB;4BAMA;;;;;;;;;;;;;;AAYP,MAAMC,gBAAgB;IACpBC,MAAMC,wBAAU,CAACC,GAAG,CAACC,QAAQ;IAC7BC,SAAS;AACX;AAUA;;;;CAIC,GACD,MAAMC,gCAAgC;IACpCC,MAAM;QACJC,QAAQC,sCAA0B;QAClCC,QAAQ,EAAE;IACZ;IACAC,aAAa;QACXH,QAAQI,6CAAiC;QACzCF,QAAQ;YAAC;YAAU;YAAc;SAAa;IAChD;IACAG,WAAW;QACTL,QAAQM,2CAA+B;QACvCJ,QAAQ,EAAE;IACZ;IACAK,SAAS;QACPP,QAAQQ,yCAA6B;QACrCN,QAAQ;YAAC;YAAU;YAAW;YAAU;SAAU;IACpD;AACF;AAIO,MAAMX;IAwEHkB,aAAaC,KAAc,EAAEC,IAA0B,EAAE;QAC/D,MAAMC,mBAAmBC,IAAAA,sBAAc,EAACH;QACxC,MAAMI,kBAAkBC,IAAAA,4BAAc,EAACH,kBAAkB;YACvDpB;YACAwB,oBAAoB;QACtB;QAEA,gEAAgE;QAChE,MAAMC,WAAiB;YAAE,GAAGN,IAAI;YAAEO,OAAON,kBAAkBM,SAAS;QAAK;QAEzE,IAAI,CAACC,MAAM,CAAC;YACVC,QAAQ;YACRlB,QAAQ;gBACNQ,OAAO;oBACL,GAAGI,eAAe;oBAClBH,MAAMM;gBACR;YACF;QACF;IACF;IAEA,MAAcI,iBAAiBxB,OAAuB,EAAE;QACtD,IAAI,CAACyB,IAAAA,uBAAgB,EAACzB,UAAU;YAC9B,MAAM,IAAI0B,MAAM;QAClB;QAEA,MAAM,EAAEC,EAAE,EAAEJ,MAAM,EAAElB,MAAM,EAAE,GAAGL;QAE/B,IAAI,CAAC4B,IAAAA,kBAAW,EAAC3B,+BAA+BsB,SAAS;YACvD,IAAI,CAACM,OAAO,CAACF,IAAI;gBACfd,OAAOiB,uBAAS,CAAChC,GAAG,CACjBiC,cAAc,CAAC;oBACdjB,MAAM;wBACJS;oBACF;gBACF,GACCS,SAAS;YACd;YACA;QACF;QAEA,MAAMC,eAAehC,6BAA6B,CAACsB,OAAwB;QAE3E,yCAAyC;QACzC,MAAMW,gBAAgBC,IAAAA,yBAAa,EAACF,aAAa5B,MAAM,EAAEA;QAEzD,MAAM,CAACQ,MAAM,GAAGuB,IAAAA,qBAAQ,EAAWF,eAAeD,aAAa9B,MAAM;QACrE,IAAIU,OAAO;YACT,IAAI,CAACgB,OAAO,CAACF,IAAI;gBACfd,OAAOiB,uBAAS,CAAChC,GAAG,CACjBuC,aAAa,CAAC;oBACbrC,SAAS,CAAC,+BAA+B,EAAEuB,OAAO,GAAG,EAAEV,MAAMb,OAAO,CAAC,CAAC,CAAC;oBACvEc,MAAM;wBACJS;wBACAlB,QAAQ6B;oBACV;gBACF,GACCF,SAAS;YACd;YACA;QACF;QAEA,IAAI;YACF,MAAMM,SAAS,MAAM,AAAC,IAAI,CAACC,OAAO,AAAQ,CAAChB,OAAO,IAAIW;YACtD,IAAI,CAACL,OAAO,CAACF,IAAI;gBAAEW;YAAO;QAC5B,EAAE,OAAOE,UAAU;YACjB,IAAI,CAACX,OAAO,CAACF,IAAI;gBACfd,OAAOK,IAAAA,4BAAc,EAACsB,UAAU;oBAC9B7C;gBACF;YACF;QACF;IACF;IAEU2B,OAAOmB,aAAmD,EAAE;QACpE,IAAI,CAACC,IAAAA,kBAAW,EAACD,kBAAkB,CAACE,IAAAA,eAAQ,EAACF,gBAAgB;YAC3D,MAAM,IAAIf,MACR;QAEJ;QAEA,IAAI,CAACkB,aAAa,CAACC,KAAK,CAAC;YACvB,GAAGJ,aAAa;YAChBK,SAAS;QACX;IACF;IAEUjB,QAAQF,EAAa,EAAEc,aAAsC,EAAE;QACvE,IAAI,CAACC,IAAAA,kBAAW,EAACD,kBAAkB,CAACE,IAAAA,eAAQ,EAACF,gBAAgB;YAC3D,0DAA0D;YAC1D,qFAAqF;YACrF,IAAI,CAACG,aAAa,CAACC,KAAK,CAAC;gBACvBhC,OAAOK,IAAAA,4BAAc,EACnB,IAAIQ,MAAM,0DACV;oBACE/B;gBACF;gBAEFgC;gBACAmB,SAAS;YACX;YACA;QACF;QAEA,IAAI,CAACF,aAAa,CAACC,KAAK,CAAC;YACvB,GAAGJ,aAAa;YAChBd;YACAmB,SAAS;QACX;IACF;IAEA;;;;;;;GAOC,GACD,MAAgBC,UACdC,MAAc,EACdC,UAAkB,EAClBC,YAAsB,EACP;QACfC,IAAAA,YAAG,EAAC,CAAC,eAAe,EAAEH,OAAO,YAAY,CAAC;QAC1C,IAAI,IAAI,CAACI,uBAAuB,EAAE;YAChCC,IAAAA,iCAAmB,EAAC,sBAAsB,IAAI,CAACD,uBAAuB;QACxE;QAEA,IAAI,IAAI,CAACE,gBAAgB,EAAE;YACzBD,IAAAA,iCAAmB,EAAC,SAAS,IAAI,CAACC,gBAAgB;QACpD;QAEA,IAAI,CAACA,gBAAgB,GAAG,CAACzC;YACvB,IAAI,CAACD,YAAY,CAACC,MAAMA,KAAK,EAAE;gBAAEmC;YAAO;QAC1C;QAEA,IAAI,CAACI,uBAAuB,GAAG,CAACvC;YAC9B,IAAI,CAACD,YAAY,CAACC,iBAAiBa,QAAQb,QAAQA,MAAM0C,MAAM,EAAE;gBAC/DP;YACF;QACF;QAEA,MAAMQ,WAAW,IAAIC,yBAAc,CAAC,IAAI,CAACC,SAAS,EAAE;YAClDC,mBAAmB;YACnBC,eAAe;gBAACC,IAAAA,sCAAuB;aAAG;QAC5C;QAEA,MAAML,SAASM,UAAU;QAEzB,MAAMC,OAAO,IAAI,CAACC,gBAAgB,CAACR;QACnC,MAAMS,WAAW,IAAI,CAACC,qBAAqB,CAACV;QAC5C,wFAAwF;QACxF,MAAMW,aAAkB;YAAEC,SAAS,CAAC;QAAE;QAEtC,IAAI;YACF,MAAM,EAAEC,UAAU,EAAEC,UAAUC,iBAAiB,EAAE,GAAGC,IAAAA,4BAAgB,EAClET,MACAE,UACAjB,QACAE;YAGF,gEAAgE;YAChE,mEAAmE;YACnE,IAAI,CAACuB,QAAQ,CAACC,GAAG,CAAC1B,QAAQ;gBACxB2B,cAAcJ;gBACdK,oBAAoB,IAAIC;gBACxBT,SAAS,CAAC;YACZ;YAEAU,IAAAA,8BAAgB,EAAC,sBAAsB,IAAI,CAAC1B,uBAAuB;YACnE0B,IAAAA,8BAAgB,EAAC,SAAS,IAAI,CAACxB,gBAAgB;YAE/C,MAAMyB,cAAc,IAAIC,YAAY;gBAClC,GAAGX,UAAU;gBACbY,QAAQd;gBACRC,SAASD,WAAWC,OAAO;YAC7B;YACA,qEAAqE;YACrE,kEAAkE;YAClE,EAAE;YACF,wDAAwD;YACxD,yCAAyC;YACzCW,YAAYG,UAAU,CAACC,IAAI,GAAGJ,YAAYG,UAAU;YACpDH,YAAYG,UAAU,CAACE,MAAM,GAAGL,YAAYG,UAAU;YACtDH,YAAYG,UAAU,CAACG,MAAM,GAAGN,YAAYG,UAAU;YAEtD,MAAM,IAAI,CAACI,oBAAoB,CAACtC,QAAQ;gBACtC+B,YAAYQ,QAAQ,CAACtC;gBACrB,IAAI,CAACuC,mBAAmB,CAACxC,QAAQmB;YACnC;QACF,EAAE,OAAOtD,OAAO;YACd,IAAI,CAAC4E,UAAU,CAACzC;YAChB,MAAM,IAAItB,MACR,CAAC,0BAA0B,EAAEsB,OAAO,GAAG,EAAE,AAACnC,MAAgBb,OAAO,CAAC,CAAC;QAEvE;IACF;IAEA;;;GAGC,GACD,AAAU0F,cAAc;QACtB,uCAAuC;QACvC,+DAA+D;QAC/D,6CAA6C;QAC7C,IAAI,CAACjB,QAAQ,CAACkB,OAAO,CAAC,CAAC7E,OACrBA,KAAK8D,kBAAkB,CAACe,OAAO,CAAC,CAACC,aAAeA,WAAWC,IAAI;QAEjE,IAAI,CAACpB,QAAQ,CAACqB,KAAK;IACrB;IAEQN,oBAAoBxC,MAAc,EAAEmB,UAAe,EAAE;QAC3D,MAAMrD,OAAO,IAAI,CAAC2D,QAAQ,CAACsB,GAAG,CAAC/C;QAC/B,sDAAsD;QACtD,IAAI,CAAClC,MAAM;YACT;QACF;QAEAA,KAAKsD,OAAO,GAAG4B,6BAAiB,CAACC,MAAM,CAAC,CAACC,KAAKC;YAC5C,MAAMC,aAAajC,WAAWC,OAAO,CAAC+B,WAAW;YACjD,MAAM,EAAEE,SAAS,EAAE,GAAGC,wBAAY,CAACH,WAAW;YAC9C,IAAIE,UAAUD,aAAa;gBACzB,OAAO;oBAAE,GAAGF,GAAG;oBAAE,CAACC,WAAW,EAAEC;gBAAW;YAC5C;YACA,OAAOF;QACT,GAAG,CAAC;IACN;IAEA;;;;;GAKC,GACD,AAAQlC,iBAAiBR,QAAwB,EAAqB;QACpE,MAAM+C,kBAAkB/C,SAASgD,OAAO,CAACC,IAAI,CAACjD;QAE9C,MAAMgD,UAAU,OAAOE;YACrB,MAAMC,gBAAgBC,IAAAA,gCAAwB,EAACF;YAC/CG,IAAAA,iCAAyB,EAACF;YAC1B,IAAI,CAACrF,MAAM,CAAC;gBAAEC,QAAQ;YAAkB;YACxC,IAAI;gBACF,OAAO,MAAMuF,IAAAA,oBAAY,EAACP,gBAAgBI,gBAAgB,IAAI;YAChE,SAAU;gBACR,IAAI,CAACrF,MAAM,CAAC;oBAAEC,QAAQ;gBAAmB;YAC3C;QACF;QAEA,qEAAqE;QACrE,sDAAsD;QACtD,MAAMwF,kBAAkB,IAAIC,MAC1B,CAAC,GACD;YACEC,KAAIC,OAAe,EAAEC,IAAqB;gBACxC,OAAO,OAAOA,SAAS,YAAY;oBAAC;iBAAU,CAACC,QAAQ,CAACD;YAC1D;YACApB,KAAImB,OAAO,EAAEC,IAA0B;gBACrC,IAAIA,SAAS,WAAW;oBACtB,OAAOX;gBACT;gBAEA,OAAOa;YACT;QACF;QAGF,OAAOC,OAAOP;IAChB;IAEA;;;;;GAKC,GACD,AAAQ7C,sBAAsBV,QAAwB,EAAkB;QACtE,MAAM+C,kBAAkB/C,SAASgD,OAAO,CAACC,IAAI,CAACjD;QAE9C,MAAMgD,UAAU,OAAOE;YACrB,MAAMC,gBAAgBC,IAAAA,gCAAwB,EAACF;YAC/Ca,IAAAA,qCAA6B,EAACZ;YAC9B,IAAI,CAACrF,MAAM,CAAC;gBAAEC,QAAQ;YAAkB;YACxC,IAAI;gBACF,OAAO,MAAMuF,IAAAA,oBAAY,EAACP,gBAAgBI,gBAAgB,IAAI;YAChE,SAAU;gBACR,IAAI,CAACrF,MAAM,CAAC;oBAAEC,QAAQ;gBAAmB;YAC3C;QACF;QAEA,MAAMiG,sBAAsBC,IAAAA,2BAAmB,EAACjE,UAAUgD;QAE1D,OAAOc,OAAOE;IAChB;IAEA;;;;GAIC,GACD,AAAQ/B,WAAWzC,MAAc,EAAQ;QACvC,IAAI,CAACyB,QAAQ,CAACiD,MAAM,CAAC1E;IACvB;IAEA;;;;;;;;;;GAUC,GACD,MAAcsC,qBACZtC,MAAc,EACd2E,QAAwC,EACvB;QACjB,MAAM7G,OAAO,IAAI,CAAC2D,QAAQ,CAACsB,GAAG,CAAC/C;QAC/B,IAAIlC,SAASuG,WAAW;YACtB,MAAM,IAAI3F,MACR,CAAC,8CAA8C,EAAEsB,OAAO,EAAE,CAAC;QAE/D;QAEA,IAAI6C;QACJ,MAAM+B,cAAc,IAAIC,QACtB,CAACC,GAAGC,SACDlC,OAAO,IACNkC,OACE,kEAAkE;gBAClEjG,uBAAS,CAAChC,GAAG,CAACC,QAAQ,CACpB,CAAC,UAAU,EAAEiD,OAAO,uCAAuC,CAAC;QAKtE,oEAAoE;QACpE,MAAMgF,iBAAiB;YAAEnC,MAAMA;QAAM;QAErC,IAAI;YACF/E,KAAK8D,kBAAkB,CAACqD,GAAG,CAACD;YAC5B,8CAA8C;YAC9C,oEAAoE;YACpE,uCAAuC;YACvC,OAAO,MAAMH,QAAQK,IAAI,CAAC;gBAACP;gBAAYC;aAAY;QACrD,SAAU;YACR9G,KAAK8D,kBAAkB,CAAC8C,MAAM,CAACM;YAE/B,IAAIlH,KAAK8D,kBAAkB,CAACuD,IAAI,KAAK,GAAG;gBACtC,IAAI,CAACC,YAAY,IAAI;gBACrB,MAAMtH,KAAK6D,YAAY;YACzB;QACF;IACF;IA9ZA,YAAsB/B,aAAqB,EAAEc,SAAiB,CAAE;QAdhE,uBAAiBe,YAAjB,KAAA;QAEA,uBAAiB7B,iBAAjB,KAAA;QAEA,uBAAiBc,aAAjB,KAAA;QAEA,uBAAiBnB,WAAjB,KAAA;QAEA,uBAAQe,oBAAR,KAAA;QAEA,uBAAQF,2BAAR,KAAA;QAEA,uBAAQgF,gBAAe;QAGrB,IAAI,CAAC3D,QAAQ,GAAG,IAAI4D;QACpB,IAAI,CAACzF,aAAa,GAAGA;QACrB,IAAI,CAACA,aAAa,CAAC0F,EAAE,CAAC,QAAQ,CAACxH;YAC7B,IAAI,CAACU,gBAAgB,CAACV,MAAMyH,KAAK,CAAC,CAAC1H;gBACjC,qCAAqC;gBACrC2H,IAAAA,oBAAQ,EAAC3H;YACX;QACF;QACA,IAAI,CAAC6C,SAAS,GAAGA;QAEjB,IAAI,CAACnB,OAAO,GAAGkG,IAAAA,yCAA+B,EAC5C,IAAI,CAAC1F,SAAS,CAAC0D,IAAI,CAAC,IAAI,GACxB,OAAOiC,QAAQC,aAAajC;YAC1B,MAAM5F,OAAO,IAAI,CAAC2D,QAAQ,CAACsB,GAAG,CAAC2C;YAC/B,uEAAuE;YACvE,mBAAmB;YACnB,MAAME,UAAU9H,MAAMsD,OAAO,CAACuE,YAAY;YAC1C,MAAM,EAAEE,QAAQ,EAAE,GAAGvC,wBAAY,CAACqC,YAAY;YAE9CG,IAAAA,aAAM,EACJ,CAACD,YAAYD,YAAYvB,WACzB,CAAC,GAAG,EAAEsB,YAAY,4BAA4B,EAAED,OAAO,CAAC;YAG1D,kEAAkE;YAClE,eAAe;YACf,IAAI,CAACE,SAAS;gBACZ,OAAO;YACT;YAEA,mCAAmC;YACnC,IAAItG,SAAS,MAAM,IAAI,CAACgD,oBAAoB,CAACoD,QAAQ,IACnDE,QAAQlC;YAGV,0EAA0E;YAC1E,IAAIpE,WAAW+E,WAAW;gBACxB/E,SAAS;YACX;YAEA,uEAAuE;YACvE,IAAI;gBACF,OAAOyG,IAAAA,kBAAW,EAACzG;YACrB,EAAE,OAAOzB,OAAO;gBACd,MAAM,IAAImI,UACR,CAAC,sCAAsC,EAAEnI,MAAMb,OAAO,CAACiJ,OAAO,CAC5D,wBACA,IACA,CAAC;YAEP;QACF,GACA,IAAI,CAACvD,WAAW,CAACe,IAAI,CAAC,IAAI;IAE9B;AAwWF"}